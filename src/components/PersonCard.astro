---
import type { CollectionEntry } from 'astro:content';
import type { Student } from '@/content/config';
import { Icon } from 'astro-icon';
import { getProjectsByPerson } from '@/helpers/projects';
import {
  getPersonTags,
  isFinished,
  isProfessor,
  isStudent,
} from '@/helpers/people';
import {
  getCourseAbbreviationByOccupation,
  getCourseAbbreviationCampusByOccupation,
} from '@/helpers/courses';

export interface Props {
  person: CollectionEntry<'people'>;
}

let icons = [
  {
    name: 'projects',
    icon: 'ph:code',
  },
  {
    name: 'linkedin',
    icon: 'ph:linkedin-logo',
  },
  {
    name: 'github',
    icon: 'icon-park:github-one',
  },
  // {
  //   name: 'twitter',
  //   icon: 'ph:twitter-logo',
  // },
  {
    name: 'instagram',
    icon: 'ph:instagram-logo',
  },
];

const { person } = Astro.props;

const {
  data: { id, name, addresses, avatar, occupations },
} = person;

const codeUrl = `/projects/people/${id}/`;

const projects = await getProjectsByPerson(person);

const hasProjects = projects.length > 0;

if (hasProjects) {
  addresses.projects = codeUrl;
}

let links = icons
  .filter((link) => addresses[link.name])
  .map((link) => ({
    ...link,
    url: addresses[link.name],
  }));

const tags = await getPersonTags(person);
---

<div
  class="person-card rounded-md overflow-hidden shadow-lg bg-white text-center w-[233px] relative"
  data-tags={tags.join('-')}
>
  <figure class="w-[233px] h-[233px] mx-auto overflow-hidden">
    <a href={addresses.linkedin} target="_blank">
      <img
        src={avatar}
        alt={name.full}
        class="animate-pulse bg-gray-300 object-cover w-[233px] h-[233px] hover:scale-105 transition duration-500 cursor-pointer"
        onload="this.onload=null;this.classList.remove('animate-pulse');"
        onerror="this.onerror=null;this.classList.remove('animate-pulse', 'bg-neutral-400');this.src='/projects/imgs/avatar.svg';"
      />
    </a>
  </figure>
  <div>
    <div class="px-6 py-2">
      <div class="font-bold text-xl">{name.compact}</div>
      <div class="hidden" data-pagefind-filter="tipo:Pessoas">
        {name.full}
      </div>
    </div>
    <div class="flex justify-center pb-2">
      {
        links.map((link) => (
          <a
            href={link.url}
            target="_blank"
            class="hover:scale-110 transition duration-500"
          >
            <Icon
              name={link.icon}
              size={32}
              class={`${link.name}-person-link`}
            />
          </a>
        ))
      }
    </div>
    <div class="tags">
      {
        isStudent(person) &&
          occupations
            .filter((occupation: Student) => occupation.course)
            .map((occupation) => (
              <a
                href={`/projects/people/${getCourseAbbreviationByOccupation(occupation)}/1`}
                class="text-[10px] pointer inline-block font-semibold text-gray-700 bg-gray-100 hover:bg-gray-200 m-0.5 py-px px-0.5 rounded-full"
              >
                {getCourseAbbreviationCampusByOccupation(occupation)}
              </a>
            ))
      }
      {
        isFinished(person) && (
          <a
            href={`/projects/people/egresso/1`}
            class="text-[10px] pointer inline-block font-semibold text-gray-700 bg-gray-100 m-0.5 py-px px-0.5 rounded-full"
          >
            egresso
          </a>
        )
      }
      {
        isProfessor(person) && (
          <a
            href={`/projects/people/professor/1`}
            class="text-[10px] pointer inline-block font-semibold text-gray-700 bg-gray-100 m-0.5 py-px px-0.5 rounded-full"
          >
            professor
          </a>
        )
      }
    </div>
    <!-- <div>
      {
        tags.map((tag) => (
          <a
            href={`/projects/people/${tag}/1`}
            class="text-[10px] inline-block font-semibold text-gray-700 bg-gray-100 hover:bg-gray-200 m-0.5 py-px px-0.5 rounded-full"
          >
            {tag}
          </a>
        ))
      }
    </div> -->
  </div>
</div>
