---
import type { CollectionEntry } from 'astro:content';
import {
  getProjectId,
  getProjects,
  isSubjectProject,
} from '@/helpers/projects';
import { getPeopleByProject } from '@/helpers/people';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCourseByAbbreviation } from '@/helpers/courses';
import { campi } from '@/content/config';

interface ProjectProps {
  category: {
    course: string;
    campus: string;
    semester: string;
    subject: string;
  };
}

export interface Props {
  project: CollectionEntry<'projects'>;
  people: CollectionEntry<'people'>[];
}

export async function getStaticPaths() {
  const projects = await getProjects();

  const page = projects.map(async (project) => {
    const projectId = getProjectId(project);

    const people = await getPeopleByProject(project);

    return {
      params: { project: projectId },
      props: {
        project,
        people,
      },
    };
  });

  return await Promise.all(page);
}

const { project, people }: Props = Astro.props;

const category = project.data.category as ProjectProps['category'];
---

<BaseLayout>
  <h1
    class="text-center pb-16 text-4xl font-bold"
    data-pagefind-filter="tipo:Projeto"
  >
    {project.data.name}
  </h1>
  <div class="flex flex-col md:flex-row gap-5">
    { project.data.addresses.preview && (
      <div class="image-preview w-full md:w-[50%]">
        <a class="underline" href={project.data.addresses.homepage}>
          <img
            src={project.data.addresses.preview}
            alt={project.data.name}
            class="border w-full"
            onload="this.onload = null; this.classList.remove('animate-pulse');"
            onerror="this.onerror = null; this.closest('.image-preview').classList.add('hidden');"
          />
        </a>
      </div>
    )}
    <div class="w-full md:w-[50%]">
      <div class="mb-2">
        <div class="font-bold text-lg">Descrição:</div>
        {project.data.description}
      </div>
      <div class="mb-2">
        <div class="font-bold text-lg">Repositório:</div>
        <a class="underline" href={project.data.addresses.repository}
          >{project.data.addresses.repository}</a
        >
      </div>
      {
        isSubjectProject(project) && (
          <div class="mb-2">
            <div class="font-bold text-lg">Curso:</div>
            <a
              href={`/projects/codes/${category.course}-${category.campus}/1/`}
              class="underline"
            >
              {getCourseByAbbreviation(category.course).data.name}{' '}({campi[category.campus]})
            </a>
          </div>

          <div class="mb-2">
            <div class="font-bold text-lg">Disciplina:</div>
            <a
              href={`/projects/codes/${category.subject}-${category.semester}/1/`}
              class="underline"
            >
              {category.subject}-{category.semester}
            </a>
          </div>
        )
      }
      <div class="mb-2">
        <div class="font-bold text-lg">Colaboradores:</div>
        <ul class="list-disc list-inside">
          {
            people
              .sort((a, b) =>
                a.data.name.compact.localeCompare(b.data.name.compact)
              )
              .map(({ data: { id, name } }) => (
                <li>
                  <a class="underline" href={`/projects/people/${id}`}>
                    {name.full}
                  </a>
                </li>
              ))
          }
        </ul>
      </div>

      <div class="mb-2">
        <div class="font-bold text-lg">Tags:</div>
        <nav class="mb-2">
          {
            project.data.tags.map((tag) => (
              <a
                href={`/projects/codes/${tag}/1/`}
                class="inline-block text-xs font-semibold text-gray-600 bg-gray-200 hover:bg-gray-300 my-1 mx-1 py-1 px-2 rounded-full"
              >
                {tag}
              </a>
            ))
          }
        </nav>
      </div>
    </div>
  </div>
</BaseLayout>
