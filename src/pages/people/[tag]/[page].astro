---
import type { CollectionEntry } from 'astro:content';
import PersonCard from '@/components/PersonCard.astro';
import PaginationIndex from '@/components/PaginationIndex.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getAllPersonTags, getPeopleByTag } from '@/helpers/people';
import { PAGE_SIZE } from '@/consts';
import { getCourseName } from '@/helpers/courses';
import { abbreviationCourses } from '@/content/config';

export interface Props {
  page: {
    data: CollectionEntry<'people'>[];
    currentPage: number;
    lastPage: number;
    url: {
      prev: string;
      next: string;
    };
  };
}

export async function getStaticPaths({ paginate }) {
  const tags = await getAllPersonTags();

  const page = await Promise.all(
    tags.map(async (tag) => {
      const people = await getPeopleByTag(tag);

      const pages = paginate(people, {
        params: { tag },
        pageSize: PAGE_SIZE,
      });

      return pages;
    })
  );

  return page.flat();
}

const { page } = Astro.props;
const { tag } = Astro.params;

const pageTitle = abbreviationCourses.some((course) => tag.includes(course))
  ? getCourseName(tag)
  : tag[0].toUpperCase() + tag.slice(1);
---

<BaseLayout pageTitle={pageTitle}>
  <div
    class="grid justify-center justify-items-center gap-5 grid-cols-1 md:grid-cols-[repeat(2,_233px)] lg:grid-cols-[repeat(3,_233px)] xl:grid-cols-4 mx-auto"
  >
    {page.data.map((person) => <PersonCard person={person} />)}
  </div>
  {
    page.lastPage > 1 && (
      <PaginationIndex page={page} type="people" index={tag} />
    )
  }
</BaseLayout>
